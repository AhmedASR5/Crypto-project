#!/usr/bin/python3
import socket
from binascii import hexlify, unhexlify

# XOR two bytearrays
def xor(first, second):
    return bytearray(x^y for x, y in zip(first, second))

class PaddingOracle:
    def __init__(self, host, port) -> None:
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.s.connect((host, port))

        ciphertext = self.s.recv(4096).decode().strip()
        self.ctext = unhexlify(ciphertext)

    def decrypt(self, ctext: bytes) -> None:
        self._send(hexlify(ctext))
        return self._recv()

    def _recv(self):
        resp = self.s.recv(4096).decode().strip()
        return resp 

    def _send(self, hexstr: bytes):
        self.s.send(hexstr + b'\n')

    def __del__(self):
        self.s.close()

if __name__ == "__main__":
    oracle = PaddingOracle('10.9.0.80', 6000)

    # Get the IV + Ciphertext from the oracle
    iv_and_ctext = bytearray(oracle.ctext)
    IV = iv_and_ctext[0:16]
    C1 = iv_and_ctext[16:32]
    C2 = iv_and_ctext[32:48]
    C3 = iv_and_ctext[48:64]

    print("C1: " + C1.hex())
    print("C2: " + C2.hex())
    print("C3: " + C3.hex())

    # For holding the decrypted data
    D = [bytearray(16) for _ in range(3)]

    # For holding the intermediate data
    CC = [bytearray(16) for _ in range(3)]

    # The ciphertext blocks and the IV
    blocks = [IV, C1, C2, C3]

    # Store decrypted plaintext blocks
    plaintext_blocks = []

    # Decrypt each block
    for block_index in range(1, 4):
        for K in range(1, 17):
            found = False
            for i in range(256):
                CC[block_index-1][16 - K] = i
                for j in range(1, K):
                    CC[block_index-1][16 - j] = D[block_index-1][16 - j] ^ K
                
                status = oracle.decrypt(blocks[block_index-1] + CC[block_index-1] + blocks[block_index])
                if status == "Valid":
                    print(f"Valid for block={block_index} K={K}: i = 0x{i:02x}")
                    print("CC: " + CC[block_index-1].hex())

                    # Update D based on the value of K
                    D[block_index-1][16 - K] = i ^ K
                    found = True
                    break

            if not found:
                print(f"Failed to find valid padding for block={block_index} K={K}")
                break

        # Compute the plaintext block
        P = xor(blocks[block_index-1], D[block_index-1])
        plaintext_blocks.append(P)

    # Print the decrypted plaintext blocks together
    for idx, block in enumerate(plaintext_blocks):
        print(f"P{idx + 1}: {block.hex()}")
